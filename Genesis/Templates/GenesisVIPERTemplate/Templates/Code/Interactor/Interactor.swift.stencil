//
//  {{ module_name }}Interactor
//  {{ project_name }}
//
//  Created by {{ developer_name }} on {{ date }}.
//

import Foundation

protocol {{ module_name }}InteractorInput: AnyObject {
    // MARK: Methods called from presenter

    func fetch(force: Bool) async throws -> [{{ module_name }}Section]
}

protocol {{ module_name }}InteractorOutput: AnyObject {
    // MARK: Callback methods for presenter
}

final class {{ module_name }}Interactor {
    // MARK: VIPER property
    weak var presenter: {{ module_name }}InteractorOutput!

    private var repository: {{ module_name }}RepositoryInterface

    // MARK: Stored instance properties

    // MARK: Computed instance properties

    // MARK: Initializer
    
    init(repository: {{ module_name }}RepositoryInterface) {
        self.repository = repository
    }

    // MARK: Other private methods
}

extension {{ module_name }}Interactor: {{ module_name }}InteractorInput {
    func fetch(force: Bool = true) async throws -> [{{ module_name }}Section] {
        let result = try await repository.fetch(force: force)
        let sections = [{{ module_name }}Section]()
        await MainActor.run(body: {
            // TODO: store sections
            // sections = ...
        })
        return sections
    }
}